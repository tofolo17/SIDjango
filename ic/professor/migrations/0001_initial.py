# Generated by Django 3.2.5 on 2021-07-16 18:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
import professor.models
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('auth', '0014_alter_user_email'),
    ]

    operations = [
        migrations.CreateModel(
            name='Conta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('request_message', models.TextField(
                    help_text='Use este campo para informar os seus objetivos de uso, metas de aprendizado, e afins.',
                    verbose_name='Mensagem de solicitação')),
                ('institution_name', models.CharField(max_length=100, verbose_name='Instituição de ensino')),
                ('account_situation', models.CharField(choices=[('autorizado', 'Autorizado'), ('pendente', 'Pendente'),
                                                                ('não autorizado', 'Não autorizado')],
                                                       default='pendente', max_length=15)),
                ('justification_template', models.TextField(default='Desculpe, mas seu pedido foi negado.',
                                                            verbose_name='Justificativa para não autorização')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Contas',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Simulador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Título')),
                ('required_concepts', models.CharField(max_length=250, verbose_name='Conceitos necessários')),
                ('minimum_concepts', models.CharField(max_length=250, verbose_name='Conceitos mínimos')),
                ('table_dimensions', models.CharField(max_length=100, verbose_name='Dimensões do experimento')),
                ('youtube_link', models.CharField(max_length=250, verbose_name='Link do vídeo Youtube do experimento')),
                ('form_link', models.CharField(max_length=250, verbose_name='Link do Formulário Google')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('token', models.CharField(default=professor.models.get_token, max_length=16, unique=True)),
                ('private', models.BooleanField(default=True, verbose_name='Privado')),
                (
                    'profile',
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.',
                                                         through='taggit.TaggedItem', to='taggit.Tag',
                                                         verbose_name='Tags')),
            ],
            options={
                'verbose_name_plural': 'Simuladores',
            },
        ),
    ]
